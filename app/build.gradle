apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def defaultAppName = "ESP RainMaker"
def defaultTransport = "Both"
def defaultSecurity = "Sec1"
def defaultPoP = ""
def defaultAppId = "com.espressif.rainmaker"

def defaultAwsRegion = "us-east-1"
def defaultUserPoolId = "us-east-1_kWz4M6MfD"
def defaultClientId = "60i6kac5f9rjuetqnq5mnmaqv6"

def defaultBaseUrl = "https://api.rainmaker.espressif.com"
def defaultClaimBaseUrl = "https://esp-claiming.rainmaker.espressif.com"

def defaultAuthUrl = "https://auth.rainmaker.espressif.com/oauth2"
def defaultRedirectUri = "rainmaker://com.espressif.rainmaker/success"
def gitHubIdentityProvider = "GitHub"
def googleIdentityProvider = "Google"
def gitHubUrl = defaultAuthUrl + "/authorize?identity_provider=" + gitHubIdentityProvider + "&redirect_uri=" + defaultRedirectUri + "&response_type=CODE&client_id=" + defaultClientId
def googleUrl = defaultAuthUrl + "/authorize?identity_provider=" + googleIdentityProvider + "&redirect_uri=" + defaultRedirectUri + "&response_type=CODE&client_id=" + defaultClientId

def defaultDocUrl = "https://rainmaker.espressif.com/"
def defaultPrivacyUrl = "https://rainmaker.espressif.com/docs/privacy-policy.html"
def defaultTermsOfUseUrl = "https://rainmaker.espressif.com/docs/terms-of-use.html"

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

android {

    compileSdkVersion 29

    defaultConfig {
        applicationId localProperties.getProperty("applicationId", defaultAppId)
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 15
        versionName "2.2.4 - ${getGitHash()}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "GitHash", "\"${getGitHash()}\""

        resValue "string", "app_name", localProperties.getProperty("appName", defaultAppName)
        buildConfigField "String", "POP", '"' + localProperties.getProperty("POP", defaultPoP) + '"'

        def transport = localProperties.getProperty("transport", defaultTransport)
        if (transport == null) {
            throw new GradleException("Transport not found. Define transport in the local.properties file.")
        } else if (!transport.equalsIgnoreCase("SoftAP") && !transport.equalsIgnoreCase("BLE") && !transport.equalsIgnoreCase("Both")) {
            throw new GradleException("Invalid 'transport' value. Please check 'transport' value in local.properties file.")
        } else {
            buildConfigField "String", "TRANSPORT", '"' + transport + '"'
        }

        def security = localProperties.getProperty("security", defaultSecurity)
        if (security == null) {
            throw new GradleException("Security not found. Define security in the local.properties file.")
        } else if (!security.equalsIgnoreCase("Sec0") && !security.equalsIgnoreCase("Sec1")) {
            throw new GradleException("Invalid 'security' value. Please check 'security' value in local.properties file.")
        } else {
            buildConfigField "String", "SECURITY", '"' + security + '"'
        }

        buildConfigField "boolean", "isScheduleSupported", localProperties.getProperty("isScheduleSupported", "true")
        buildConfigField "boolean", "isLocalControlSupported", localProperties.getProperty("isLocalControlSupported", "true")

        buildConfigField "String", "AWS_REGION", '"' + localProperties.getProperty("awsRegion", defaultAwsRegion) + '"'
        buildConfigField "String", "USER_POOL_ID", '"' + localProperties.getProperty("userPoolId", defaultUserPoolId) + '"'
        buildConfigField "String", "CLIENT_ID", '"' + localProperties.getProperty("clientId", defaultClientId) + '"'

        buildConfigField "String", "BASE_URL", '"' + localProperties.getProperty("baseUrl", defaultBaseUrl) + '"'
        buildConfigField "String", "CLAIM_BASE_URL", '"' + localProperties.getProperty("claimBaseUrl", defaultClaimBaseUrl) + '"'

        buildConfigField "String", "AUTH_URL", '"' + localProperties.getProperty("authUrl", defaultAuthUrl) + '"'
        buildConfigField "String", "TOKEN_URL", '"' + localProperties.getProperty("authUrl", defaultAuthUrl) + "/token" + '"'
        buildConfigField "String", "REDIRECT_URI", '"' + localProperties.getProperty("redirectUri", defaultRedirectUri) + '"'
        buildConfigField "String", "GITHUB_URL", '"' + gitHubUrl + '"'
        buildConfigField "String", "GOOGLE_URL", '"' + googleUrl + '"'

        buildConfigField "String", "DOCUMENTATION_URL", '"' + localProperties.getProperty("docUrl", defaultDocUrl) + '"'
        buildConfigField "String", "PRIVACY_URL", '"' + localProperties.getProperty("privacyUrl", defaultPrivacyUrl) + '"'
        buildConfigField "String", "TERMS_URL", '"' + localProperties.getProperty("termsOfUseUrl", defaultTermsOfUseUrl) + '"'
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
        }
    }

    buildToolsVersion '28.0.3'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.5.1'
    }
    plugins {
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                javalite {}
            }
        }
    }
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    implementation 'com.google.protobuf:protobuf-lite:3.0.1'
    implementation 'com.google.crypto.tink:tink-android:1.1.0'

    implementation 'com.wang.avi:library:2.1.3'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.auth0.android:jwtdecode:1.4.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    implementation 'com.aventrix.jnanoid:jnanoid:2.0.0'
    implementation 'com.budiyev.android:code-scanner:2.1.0'
    implementation 'com.github.espressif:esp-idf-provisioning-android:lib-2.0.8'

    implementation 'com.amazonaws:aws-android-sdk-cognitoidentityprovider:2.19.0'
    implementation 'com.github.warkiz.tickseekbar:tickseekbar:0.1.4'
    implementation('com.amazonaws:aws-android-sdk-iot:2.15.2') { transitive = true }
    implementation('com.amazonaws:aws-android-sdk-mobile-client:2.15.2') { transitive = true }

    // Room dependencies
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'

    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}
